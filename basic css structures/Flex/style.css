html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}

html {
    box-sizing: border-box;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

body {
    line-height: 1.5;
}

ol,
ul {
    list-style: none;
}

img {
    max-width: 100%;
    height: auto;
}

h1 {
    text-align: center;
    font-size: 2em;
    border: solid 1px #000;
    margin: 10px 0;
    font-weight: bold;
    letter-spacing: 10px;
    background-color: aqua
}

h2 {
    text-align: center;
    font-size: 1.5em;
    border: solid 1px #000;
    margin: 10px 0;
    font-weight: bold;
    letter-spacing: 5px;
    background-color: red;
}


/* Flex */

/*
-> Flex bir containerin içindeki elemanları hizalamak için kullanılır.
-> Flex bir esneklik sağlar.
-> Flex containerin içindeki elemanlar flex item olarak adlandırılır.
-> Item'ları hizalamak için containera display: flex; özelliği verilir.
-> Ancak sadece container'ın içindeki elemanlar flex item olur, yani container'ın içindeki başka bir container'ın elemanları flex item olmaz.

    Örnek olarak div bir containerin içindeki div elemanları flex item olur.
   Bu elemanlar flex item olabilmek için display: flex; özelliğine sahip olmalıdır.
   bu özellik sayesinde elemanlar birbirlerine göre hizalanabilir.

Flex'in float ve position gibi kavramlardan farkı ise daha esnek ve daha temiz kod yazmamızı sağlamasıdır.

*/

div[class^="container"] {
    margin: 20px 0;
    padding: 10px;
    border: solid 5px #ddd;
}

div.container {
    display: flex;
    /* 
   flex ile inline-flex arasındaki fark ise inline-flex elemanların yan yana sıralanmasını sağlar
ve tarayıcı penceresi küçüldüğünde elemanlar bir alt satıra geçmez. Ancak flex ile elemanlar pencereye göre şekil alır.
    */
}

div.container div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

/* Flex-direction ile yön belirtme*/

/*
 ->Flex-direction ile elemanların yönünü belirleyebiliriz.  
 ->row, row-reverse, column, column-reverse şeklinde belirleyebiliriz.
    (default: row)

    -row: elemanlar yatay olarak sıralanır.
    -row-reverse: elemanlar yatay olarak sıralanır ancak ters sıralanır.
    -column: elemanlar dikey olarak sıralanır.
    -column-reverse: elemanlar dikey olarak sıralanır ancak ters sıralanır.

*/

/* YATAYDA */

div.container2 {
    display: flex;
    flex-direction: row-reverse;
}

div.container2 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

/* DİKEYDE */

div.container3 {
    display: flex;
    flex-direction: column;
}

div.container3 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

/* Flex-wrap ile elemanların sıralanma şeklini belirleme*/

/*
-> Flex-wrap ile elemanların sıralanma şeklini belirleyebiliriz.
-> nowrap, wrap, wrap-reverse şeklinde belirleyebiliriz.
    (default: nowrap)

    -nowrap: elemanlar bir alt satıra geçmez tek bir satırda sıralanır.
    -wrap: elemanlar bir alt satıra geçer ancak sıralanır.
    -wrap-reverse: elemanlar bir alt satıra geçer ancak ters sıralanır.
*/


/* 
    Eğer elemanlar sığmıyorsa bir alt satıra geçer.
*/

div.container4 {
    display: flex;
    flex-wrap: wrap;
}

div.container4 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

/*
    Elemanlar sığmasa bile bir alt satıra geçmez.
*/

div.container5 {
    display: flex;
    flex-wrap: nowrap;
}

div.container5 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;

}

/*  Align-items ile elemanların dikeyde hizalanma şeklini belirleme */

/*
  
  -> Align-items ile elemanların dikeyde hizalanma şeklini belirleyebiliriz.
  -> flex-start, flex-end, center, stretch, baseline şeklinde belirleyebiliriz.
  (default: stretch)
  
  -flex-start: elemanlar containerin başlangıcına göre hizalanır.
  -flex-end: elemanlar containerin sonuna göre hizalanır.
  -center: elemanlar containerin ortasına göre hizalanır.
  -stretch: elemanlar containerin tamamını kaplar.
  -baseline: elemanlar containerin satıra-yazıya göre hizalanır.
  
 */

/*
    Elemanlar containerin sonuna göre hizalanır.
*/

div.container6 {
    display: flex;
    align-items: flex-end;
    height: 300px;
}

div.container6 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

/*
    Elemanlar containerin ortasına göre hizalanır.
*/

div.container7 {
    display: flex;
    align-items: center;
    height: 300px;
}

div.container7 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

/* Justify-content ile elemanların yatayda hizalanma şeklini belirleme */

/*
  
  -> Justify-content ile elemanların yatayda hizalanma şeklini belirleyebiliriz.
  -> flex-start, flex-end, center, space-between, space-around şeklinde belirleyebiliriz.
  (default: flex-start)
  
  -flex-start: elemanlar containerin başlangıcına göre hizalanır.
  -flex-end: elemanlar containerin sonuna göre hizalanır.
  -center: elemanlar containerin ortasına göre hizalanır.
  -space-between: elemanlar containerin başlangıcı ve sonu arasında eşit boşluk bırakarak hizalanır.
  -space-around: elemanlar containerin etrafında eşit boşluk bırakarak hizalanır baş ve son yarısı kadar boşluk içerir.
  -space-evenly: elemanlar containerin etrafında ve arasında eşit boşluk bırakarak hizalanır.
  
 */

/*
    Elemanlar containerın sağına hizalanır.
*/
div.container8 {
    display: flex;
    justify-content: flex-end;
    height: 300px;
}

div.container8 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

/* Elemanlar containerin başlangıcı ve sonu arasında eşit boşluk bırakarak hizalanır. */

div.container9 {
    display: flex;
    justify-content: space-between;
    height: 300px;
}

div.container9 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

/* aling-content ile çok satırlı yapılarda elemanların dikeyde hizalanma şeklini belirleme */

/*
  
  -> Align-content ile çok satırlı yapılarda elemanların dikeyde hizalanma şeklini belirleyebiliriz.
  ->align-content ile align-items arasındaki fark align-items elemanların containera göre hizalanmasını sağlar,
  ancak align-content elemanların containerin içindeki boşluğa göre hizalanmasını sağlar.
  -> flex-start, flex-end, center, space-between, space-around, stretch şeklinde belirleyebiliriz.
   (default: stretch)
  
  -flex-start: elemanlar containerin başlangıcına göre hizalanır.
  -flex-end: elemanlar containerin sonuna göre hizalanır.
  -center: elemanlar containerin ortasına göre hizalanır.
  -space-between: elemanlar containerin başlangıcı ve sonu arasında eşit boşluk bırakarak hizalanır.
  -space-around: elemanlar containerin etrafında eşit boşluk bırakarak hizalanır baş ve son yarısı kadar boşluk içerir.
  -stretch: elemanlar containerin tamamını kaplar.

  (flex-wrap: wrap; olmalıdır.)
  
 */
 


div.container10 {
    display: flex;
    flex-wrap: wrap;
    align-content: center;
    height: 300px;
}

div.container10 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}


/* order ile elemanların sıralanma şeklini belirleme */

/*
-> Order ile elemanların sıralanma şeklini belirleyebiliriz.
-> Varsayılan sıralama değeri 0'dır.
-> Sıralama değeri küçük olan elemanlar önce, büyük olanlar ise sonra sıralanır.
-> Negatif değerler de kullanılabilir.

*/

div.container11 {
    display: flex;
}

div.container11 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

div.container11 div:nth-child(1) {
    order: 2;
}

div.container11 div:nth-child(2) {
    order: 3;
}

div.container11 div:nth-child(3) {
    order: 1;
}

/* flex-grow ile elemanların büyüme oranını belirleme */

/*

-> Flex-grow ile elemanların büyüme oranını belirleyebiliriz.
-> Varsayılan değeri 0'dır.
-> Elemanların büyüme oranı aynı ise eşit büyürler.
-> Elemanların büyüme oranı farklı ise büyüme oranına göre büyürler.
*/

div.container12 {
    display: flex;
}

div.container12 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

div.container12 div:nth-child(1) {
    flex-grow: 1;
}

div.container12 div:nth-child(2) {
    flex-grow: 2;
}

div.container12 div:nth-child(3) {
    flex-grow: 3;
}

/* flex-shrink ile elemanların küçülme oranını belirleme */

/*

-> Flex-shrink ile elemanların küçülme oranını belirleyebiliriz.
-> Varsayılan değeri 1'dir.
-> Elemanların küçülme oranı aynı ise eşit küçülürler.
-> Elemanların küçülme oranı farklı ise küçülme oranına göre küçülürler.

*/

div.container13 {
    display: flex;
    width: 300px;
}

div.container13 div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

div.container13 div:nth-child(1) {
    flex-shrink: 1;
}

div.container13 div:nth-child(2) {
    flex-shrink: 2;
}

div.container13 div:nth-child(3) {
    flex-shrink: 3;
}

/* flex-basis ile elemanların başlangıç genişliğini belirleme */

/*

-> Flex-basis ile elemanların başlangıç genişliğini belirleme
-> Varsayılan değeri auto'dur.
-> Genişlik değeri px, %, em gibi değerler alabilir.

*/

div.container14 {
    display: flex;
}

div.container14 div {
    flex-basis: 100px;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}

/* flex ile elemanların genişlik oranını belirleme */

/*

-> Flex ile elemanların genişlik oranını belirleme
-> Varsayılan değeri 0'dır.
-> Genişlik değeri px, %, em gibi değerler alabilir.

*/

div.container15 {
    display: flex;
}

div.container15 div {
    flex: 1 1 auto;
    height: 100px;
    background-color: skyblue;
    text-align: center;
    line-height: 100px;
    font-weight: bold;
    font-size: 50px;
    margin: 10px 10px;
}



 


 